from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from app.repositories.user_repo import get_user_by_telegram_id
from app.repositories.event_repo import (
    get_upcoming_events_by_user, get_event_by_id, delete_event
)
from app.utils.i18n import L
from app.db import async_session


async def show_events_for_deletion(message: Message):
    """
    –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –Ω–∞–π–±–ª–∏–∂—á–∏—Ö –ø–æ–¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏.

    –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ –ø–æ–¥—ñ–π –Ω–µ–º–∞—î ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    async with async_session() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)
        if not user:
            await message.answer(L({
                "uk": "‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.",
                "en": "‚ö†Ô∏è Please register first via /start."
            }))
            return

        events = await get_upcoming_events_by_user(session, user.id)
        if not events:
            await message.answer(L({
                "uk": "üì≠ –ü–æ–¥—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                "en": "üì≠ No events found for deletion."
            }))
            return

        for event in events:
            time_str = event.time.strftime("%H:%M") if event.time else L({"uk": "–±–µ–∑ —á–∞—Å—É", "en": "no time"})
            text = f"<b>{event.title}</b>\nüìÖ {event.date.strftime('%d.%m.%Y')} –æ {time_str}"
            button = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text=L({"uk": "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", "en": "‚ùå Delete"}), callback_data=f"delete_event:{event.id}")
            ]])
            await message.answer(text, reply_markup=button)


async def delete_event_by_callback(callback: CallbackQuery, event_id: int):
    """
    –í–∏–¥–∞–ª—è—î –ø–æ–¥—ñ—é –∑–∞ ID –∑ callback-–∑–∞–ø–∏—Ç—É —Ç–∞ –æ–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    –Ø–∫—â–æ –ø–æ–¥—ñ—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–∞, –Ω–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.
    """
    async with async_session() as session:
        event = await get_event_by_id(session, event_id)
        if event:
            await delete_event(session, event)
            await callback.message.edit_text(L({
                "uk": f"üóë –ü–æ–¥—ñ—é <b>{event.title}</b> –≤–∏–¥–∞–ª–µ–Ω–æ.",
                "en": f"üóë Event <b>{event.title}</b> deleted."
            }))
        else:
            await callback.answer(L({
                "uk": "‚ö†Ô∏è –ü–æ–¥—ñ—è –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î.",
                "en": "‚ö†Ô∏è Event no longer exists."
            }), show_alert=True)
    await callback.answer()