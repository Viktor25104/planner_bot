from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from app.repositories.user_repo import get_user_by_telegram_id
from app.repositories.event_repo import get_event_by_id, get_events_in_range, get_events_by_user
from app.integrations.google_calendar import export_event, import_events_from_google
from app.utils.i18n import L
from app.db import async_session


def format_event(event) -> str:
    """
        –§–æ—Ä–º–∞—Ç—É—î –ø–æ–¥—ñ—é —É –≤–∏–≥–ª—è–¥—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—è–º–∏ (–¥–∞—Ç–∞, —á–∞—Å, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è, —Ç–µ–≥–∏).
    """
    date = event.date.strftime("%d.%m.%Y")
    time = event.time.strftime("%H:%M") if event.time else L({"uk": "–±–µ–∑ —á–∞—Å—É", "en": "no time"})
    lines = [f"<b>{event.title}</b>", f"üìÖ {date} –æ {time}"]
    if event.category:
        lines.append(f"üìÇ {L({'uk': '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', 'en': 'Category'})}: {event.category}")
    if event.tag:
        lines.append(f"üîñ {L({'uk': '–¢–µ–≥–∏', 'en': 'Tags'})}: {event.tag}")
    return "\n".join(lines)


def build_google_button(event_id: int):
    """
        –°—Ç–≤–æ—Ä—é—î –∫–Ω–æ–ø–∫—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –ø–æ–¥—ñ—ó –≤ Google Calendar.
    """
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üì§ Google", callback_data=f"export_google:{event_id}")
    ]])


async def list_events(message: Message, start, end, title: str):
    """
        –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ (—ñ —Ñ—ñ–ª—å—Ç—Ä–æ–º –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é –∞–±–æ —Ç–µ–≥–æ–º).
    """
    args = message.text.strip().split(maxsplit=1)
    filter_text = args[1].strip() if len(args) > 1 else None
    category = tag = None

    if filter_text:
        if filter_text.startswith("#"):
            tag = filter_text[1:]
        else:
            category = filter_text

    async with async_session() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)
        if not user:
            await message.answer(L({
                "uk": "‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å /start.",
                "en": "‚ö†Ô∏è You are not registered yet. Please send /start."
            }))
            return

        events = await get_events_in_range(session, user.id, start, end, category, tag)
        if not events:
            await message.answer(L({
                "uk": "üì≠ –ü–æ–¥—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                "en": "üì≠ No events found."
            }, user.language))
            return

        await message.answer(title)
        for event in events:
            await message.answer(format_event(event), reply_markup=build_google_button(event.id))


async def export_one_to_google(callback: CallbackQuery, event_id: int):
    """
        –ï–∫—Å–ø–æ—Ä—Ç—É—î –æ–¥–Ω—É –ø–æ–¥—ñ—é –≤ Google Calendar –ø–æ callback-–∑–∞–ø–∏—Ç—É.
    """
    async with async_session() as session:
        event = await get_event_by_id(session, event_id)
        if not event:
            await callback.answer(L({
                "uk": "‚ö†Ô∏è –ü–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.",
                "en": "‚ö†Ô∏è Event not found."
            }), show_alert=True)
            return

        user = await get_user_by_telegram_id(session, callback.from_user.id)
        if not user:
            await callback.answer(L({
                "uk": "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                "en": "‚ö†Ô∏è User not found."
            }), show_alert=True)
            return

        try:
            link = await export_event(
                user_id=user.telegram_id,
                title=event.title,
                date=event.date,
                time=event.time,
                description=event.description or ""
            )
            await callback.message.edit_reply_markup(
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚úÖ Google", url=link)
                ]])
            )
            await callback.answer(L({
                "uk": "‚úÖ –ü–æ–¥—ñ—é –¥–æ–¥–∞–Ω–æ –¥–æ Google!",
                "en": "‚úÖ Event exported to Google!"
            }, user.language))
        except Exception as e:
            print(f"[Export Error] {e}")
            await callback.answer(L({
                "uk": "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ!",
                "en": "‚ö†Ô∏è Export failed!"
            }, user.language), show_alert=True)


async def export_all_to_google(message: Message):
    """
        –ï–∫—Å–ø–æ—Ä—Ç—É—î –≤—Å—ñ –ø–æ–¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ Google Calendar.
    """
    async with async_session() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)
        if not user:
            await message.answer(L({
                "uk": "‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å /start.",
                "en": "‚ö†Ô∏è You are not registered yet. Please send /start."
            }))
            return

        events = await get_events_by_user(session, user.id)
        count = 0
        for event in events:
            try:
                await export_event(
                    user_id=user.telegram_id,
                    title=event.title,
                    date=event.date,
                    time=event.time,
                    description=event.description or ""
                )
                count += 1
            except Exception as e:
                print(f"[Export All Error] {e}")

        await message.answer(L({
            "uk": f"‚úÖ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {count} –ø–æ–¥—ñ–π –¥–æ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è.",
            "en": f"‚úÖ Exported {count} events to Google Calendar."
        }, user.language))


async def import_from_google_calendar(message: Message):
    """
        –Ü–º–ø–æ—Ä—Ç—É—î –ø–æ–¥—ñ—ó –∑ Google Calendar –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    async with async_session() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)
        if not user:
            await message.answer(L({
                "uk": "‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.",
                "en": "‚ö†Ô∏è Please register first via /start."
            }))
            return

        try:
            count = await import_events_from_google(user)
            await message.answer(L({
                "uk": f"‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {count} –ø–æ–¥—ñ–π –∑ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è.",
                "en": f"‚úÖ Imported {count} events from Google Calendar."
            }, user.language))
        except Exception as e:
            print(f"[Import Error] {e}")
            await message.answer(L({
                "uk": "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –∑ Google.",
                "en": "‚ùå Failed to import from Google."
            }, user.language))
