import os
from collections import Counter, defaultdict
from datetime import datetime, timedelta

import matplotlib.pyplot as plt
from aiogram.types import Message, FSInputFile

from app.db import async_session
from app.repositories.user_repo import get_user_by_telegram_id
from app.repositories.event_repo import get_events_by_user
from app.utils.i18n import L


async def build_charts_for_user(message: Message, mode: str):
    """
    –ë—É–¥—É—î –¥—ñ–∞–≥—Ä–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ, —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ–¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥.

    Args:
        message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        mode (str): –ü–µ—Ä—ñ–æ–¥ ('month', 'week', 'year', 'all').

    –í—ñ–¥–ø–æ–≤—ñ–¥—å:
        –ù–∞–¥—Å–∏–ª–∞—î –∫—ñ–ª—å–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å-–≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø–æ–¥—ñ–π.
    """
    now = datetime.now()

    if mode == "month":
        date_from = now.replace(day=1).date()
        title = L({"uk": "–∑–∞ –º—ñ—Å—è—Ü—å", "en": "for the month"})
    elif mode == "week":
        date_from = (now - timedelta(days=now.weekday())).date()
        title = L({"uk": "–∑–∞ —Ç–∏–∂–¥–µ–Ω—å", "en": "for the week"})
    elif mode == "year":
        date_from = now.replace(month=1, day=1).date()
        title = L({"uk": "–∑–∞ —Ä—ñ–∫", "en": "for the year"})
    else:
        date_from = None
        title = L({"uk": "–∑–∞ –≤–µ—Å—å —á–∞—Å", "en": "for all time"})

    async with async_session() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)

        if not user:
            await message.answer(L({
                "uk": "‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å /start.",
                "en": "‚ö†Ô∏è You are not registered yet. Please send /start."
            }))
            return

        events = await get_events_by_user(session, user.id)

    if not events:
        await message.answer(L({
            "uk": "‚ÑπÔ∏è –ü–æ–¥—ñ–π –ø–æ–∫–∏ –Ω–µ–º–∞—î.",
            "en": "‚ÑπÔ∏è No events yet."
        }))
        return

    filtered = [e for e in events if not date_from or e.date >= date_from]
    if not filtered:
        await message.answer(L({
            "uk": f"‚ÑπÔ∏è –ü–æ–¥—ñ–π {title} –Ω–µ–º–∞—î.",
            "en": f"‚ÑπÔ∏è No events {title}."
        }))
        return

    user_id = message.from_user.id
    path1 = _build_activity_chart(filtered, title, user_id)
    path2 = _build_status_chart(filtered, title, user_id)
    path3 = _build_category_chart(filtered, user_id)

    await message.answer_photo(FSInputFile(path1), caption=L({
        "uk": f"üìà –ó–∞–≥–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å {title}",
        "en": f"üìà Overall activity {title}"
    }))
    await message.answer_photo(FSInputFile(path2), caption=L({
        "uk": f"üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥—ñ–π {title}",
        "en": f"üìä Event status {title}"
    }))
    if path3:
        await message.answer_photo(FSInputFile(path3), caption=L({
            "uk": "üìò –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–¥—ñ–π",
            "en": "üìò Event categories"
        }))

    os.remove(path1)
    os.remove(path2)
    if path3:
        os.remove(path3)


def _build_activity_chart(events, title, user_id):
    """
    –°—Ç–≤–æ—Ä—é—î –≥—ñ—Å—Ç–æ–≥—Ä–∞–º—É –∑–∞–≥–∞–ª—å–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–æ –¥–Ω—è—Ö.
    """
    daily = Counter(e.date for e in events)
    days = sorted(daily.keys())
    x = [d.strftime("%d.%m") for d in days]
    y = [daily[d] for d in days]

    path = f"chart_activity_{user_id}.png"
    fig, ax = plt.subplots(figsize=(10, 4))
    ax.bar(x, y, color="#4fa9f2")
    ax.set_title(f"üìÖ " + L({"uk": f"–ü–æ–¥—ñ—ó {title}", "en": f"Events {title}"}))
    ax.set_xlabel(L({"uk": "–î–∞—Ç–∞", "en": "Date"}))
    ax.set_ylabel(L({"uk": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "en": "Count"}))
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(path)
    plt.close()
    return path


def _build_status_chart(events, title, user_id):
    """
    –°—Ç–≤–æ—Ä—é—î –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω—É –¥—ñ–∞–≥—Ä–∞–º—É —Å—Ç–∞—Ç—É—Å—ñ–≤ –ø–æ–¥—ñ–π:
    - ‚úÖ –≤–∏–∫–æ–Ω–∞–Ω–æ
    - ‚ö†Ô∏è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ
    - üìÖ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ
    """
    now = datetime.now()
    status_by_day = defaultdict(lambda: {"done": 0, "expired": 0, "upcoming": 0})
    for e in events:
        key = e.date
        dt = datetime.combine(e.date, e.time or now.time())
        if e.is_done:
            status_by_day[key]["done"] += 1
        elif dt < now:
            status_by_day[key]["expired"] += 1
        else:
            status_by_day[key]["upcoming"] += 1

    days = sorted(status_by_day)
    x = [d.strftime("%d.%m") for d in days]
    done = [status_by_day[d]["done"] for d in days]
    expired = [status_by_day[d]["expired"] for d in days]
    upcoming = [status_by_day[d]["upcoming"] for d in days]

    path = f"chart_status_{user_id}.png"
    fig, ax = plt.subplots(figsize=(10, 4))
    ax.bar(x, done, label=L({"uk": "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", "en": "‚úÖ Done"}), color="#7ed957")
    ax.bar(x, expired, bottom=done, label=L({"uk": "‚ö†Ô∏è –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ", "en": "‚ö†Ô∏è Expired"}), color="#f49e4c")
    ax.bar(x, upcoming, bottom=[d + e for d, e in zip(done, expired)], label=L({"uk": "üìÖ –ú–∞–π–±—É—Ç–Ω—ñ", "en": "üìÖ Upcoming"}), color="#4fa9f2")
    ax.set_title(L({"uk": f"–°—Ç–∞—Ç—É—Å –ø–æ–¥—ñ–π {title}", "en": f"Event status {title}"}))
    ax.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(path)
    plt.close()
    return path


def _build_category_chart(events, user_id):
    """
    –°—Ç–≤–æ—Ä—é—î –∫—Ä—É–≥–æ–≤—É –¥—ñ–∞–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø–æ–¥—ñ–π –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏.
    """
    cat_count = Counter(e.category for e in events if e.category)
    if not cat_count:
        return None

    path = f"chart_categories_{user_id}.png"
    fig, ax = plt.subplots()
    labels = list(cat_count.keys())
    sizes = list(cat_count.values())
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
    ax.set_title(L({"uk": "–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ–¥—ñ–π –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏", "en": "Event distribution by category"}))
    plt.tight_layout()
    plt.savefig(path)
    plt.close()
    return path
