from datetime import datetime
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.repositories.user_repo import get_user_by_telegram_id
from app.repositories.event_repo import get_events_by_user, get_event_by_id, save_event
from app.utils.i18n import L
from app.db import async_session


edit_prompts = {
    "title": L({
        "uk": "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:",
        "en": "‚úèÔ∏è Enter new event title:"
    }),
    "date": L({
        "uk": "üìÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É (–î–î.–ú–ú.–†–†–†–†):",
        "en": "üìÖ Enter new date (DD.MM.YYYY):"
    }),
    "time": L({
        "uk": "‚è∞ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Å (–ì–ì:–•–•):",
        "en": "‚è∞ Enter new time (HH:MM):"
    }),
    "remind": L({
        "uk": "üîî –ó–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –¥–æ –ø–æ–¥—ñ—ó –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è?",
        "en": "üîî How many minutes before the event to send a reminder?"
    }),
    "category": L({
        "uk": "üè∑ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –∞–±–æ `-` –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è:",
        "en": "üè∑ Enter new category or `-` to clear:"
    }),
    "tag": L({
        "uk": "üîñ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ —Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É), –∞–±–æ `-` –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è:",
        "en": "üîñ Enter new tags (comma separated) or `-` to clear:"
    }),
    "repeat": L({
        "uk": "üîÅ –ù–∞–ø–∏—à—ñ—Ç—å —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è: none / daily / weekly / monthly / yearly",
        "en": "üîÅ Enter repeat type: none / daily / weekly / monthly / yearly"
    }),
}


async def list_events_to_edit(message: Message, state: FSMContext):
    """
    –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.

    –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–æ–¥—ñ–π –Ω–µ–º–∞—î ‚Äî –ø–æ–∫–∞–∑—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    async with async_session() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)
        if not user:
            await message.answer(L({
                "uk": "‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.",
                "en": "‚ö†Ô∏è Please register first via /start."
            }))
            return

        events = await get_events_by_user(session, user.id)
        if not events:
            await message.answer(L({
                "uk": "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø–æ–¥—ñ–π.",
                "en": "üì≠ You have no events yet."
            }))
            return

        for event in events:
            date_str = event.date.strftime("%d.%m.%Y")
            time_str = event.time.strftime("%H:%M") if event.time else L({"uk": "–±–µ–∑ —á–∞—Å—É", "en": "no time"})
            text = f"<b>{event.title}</b>\nüìÖ {date_str} –æ {time_str}"

            buttons = [
                InlineKeyboardButton(text=L({"uk": "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "en": "‚úèÔ∏è Edit"}),
                                     callback_data=f"edit_event:{event.id}")
            ]
            await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[buttons]))


async def send_edit_prompt(callback: CallbackQuery, state: FSMContext):
    """
    –í–∏–≤–æ–¥–∏—Ç—å –∑–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –ø–æ–ª—è.
    """
    field = callback.data.split(":")[1]
    await state.update_data(field=field)

    lang = getattr(callback.from_user, "language_code", "en")
    prompt_text = edit_prompts[field]
    if callable(prompt_text):
        prompt_text = prompt_text(lang)

    await callback.message.answer(prompt_text)
    await callback.answer()


async def apply_edit(message: Message, state: FSMContext):
    """
    –ó–∞—Å—Ç–æ—Å–æ–≤—É—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ –ø–æ–ª—è –ø–æ–¥—ñ—ó.

    –£ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É –∞–±–æ –Ω–µ–¥—ñ–π—Å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    data = await state.get_data()
    event_id = data.get("event_id")
    field = data.get("field")
    value = message.text.strip()

    async with async_session() as session:
        event = await get_event_by_id(session, event_id)
        if not event:
            await message.answer(L({"uk": "‚ö†Ô∏è –ü–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", "en": "‚ö†Ô∏è Event not found."}))
            await state.clear()
            return

        try:
            if field == "title":
                event.title = value
            elif field == "date":
                event.date = datetime.strptime(value, "%d.%m.%Y").date()
            elif field == "time":
                event.time = datetime.strptime(value, "%H:%M").time()
            elif field == "remind":
                event.remind_before = int(value)
            elif field == "category":
                event.category = None if value == "-" else value
            elif field == "tag":
                event.tag = None if value == "-" else value
            elif field == "repeat":
                if value.lower() not in ("none", "daily", "weekly", "monthly", "yearly"):
                    await message.answer(L({
                        "uk": "‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä—É.",
                        "en": "‚ùå Invalid repeat value."
                    }))
                    return
                event.repeat = value.lower()
            else:
                await message.answer(L({
                    "uk": "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.",
                    "en": "‚ö†Ô∏è Unknown action."
                }))
                await state.clear()
                return

            await save_event(session, event)
            await message.answer(L({
                "uk": "‚úÖ –ü–æ–¥—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ.",
                "en": "‚úÖ Event updated."
            }))
        except Exception:
            await message.answer(L({
                "uk": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                "en": "‚ùå Invalid format. Please try again."
            }))

    await state.clear()
