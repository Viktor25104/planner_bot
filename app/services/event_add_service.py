from datetime import datetime
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from app.db import async_session
from app.models.models import User, Event
from app.utils.i18n import L


def validate_date(text: str) -> datetime.date:
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ '–î–î.–ú–ú.–†–†–†–†' –Ω–∞ –æ–±'—î–∫—Ç –¥–∞—Ç–∏.

    Args:
        text (str): –†—è–¥–æ–∫ –∑ –¥–∞—Ç–æ—é.

    Returns:
        datetime.date: –ü–∞—Ä—Å–µ–Ω–∞ –¥–∞—Ç–∞.
    """
    return datetime.strptime(text.strip(), "%d.%m.%Y").date()


def validate_time(text: str) -> datetime.time:
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ '–ì–ì:–•–•' –Ω–∞ –æ–±'—î–∫—Ç —á–∞—Å—É.

    Args:
        text (str): –†—è–¥–æ–∫ –∑ —á–∞—Å–æ–º.

    Returns:
        datetime.time: –ü–∞—Ä—Å–µ–Ω–∏–π —á–∞—Å.
    """
    return datetime.strptime(text.strip(), "%H:%M").time()


async def finish_event_logic(message: Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó:
    - –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.
    - –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–¥—ñ—é –≤ –±–∞–∑—É.
    - –ù–∞–¥–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó (—è–∫—â–æ –±–∞–≥–∞—Ç–æ –ø–æ–¥—ñ–π –∞–±–æ –≤–æ–Ω–∏ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—é—Ç—å—Å—è).

    Args:
        message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM.

    –í—ñ–¥–ø–æ–≤—ñ–¥—å:
        –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó (—è–∫—â–æ —î).
    """
    repeat = message.text.strip().lower()
    if repeat not in ("none", "daily", "weekly", "monthly", "yearly"):
        await message.answer(L({
            "uk": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—Ç–æ—Ä—É.",
            "en": "‚ùå Invalid repeat format."
        }))
        return

    await state.update_data(repeat=repeat)
    data = await state.get_data()

    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user:
            await message.answer(L({
                "uk": "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–∞–ø–∏—à—ñ—Ç—å /start.",
                "en": "‚ö†Ô∏è User not found. Please send /start."
            }))
            return

        event = Event(
            user_id=user.id,
            title=data["title"],
            date=data["date"],
            time=data["time"],
            remind_before=data["remind_before"],
            category=data.get("category"),
            tag=data.get("tag"),
            repeat=data.get("repeat"),
        )
        session.add(event)
        await session.commit()

        stmt_day = select(Event).where(Event.user_id == user.id, Event.date == event.date)
        day_result = await session.execute(stmt_day)
        same_day_events = day_result.scalars().all()

        recommendations = []

        if len(same_day_events) >= 5:
            recommendations.append(L({
                "uk": "‚ö†Ô∏è –£ –≤–∞—Å –≤–∂–µ –±–∞–≥–∞—Ç–æ –ø–æ–¥—ñ–π –Ω–∞ —Ü–µ–π –¥–µ–Ω—å. –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ —â–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏.",
                "en": "‚ö†Ô∏è You already have many events on this day. Consider rescheduling some."
            }))

        for other in same_day_events:
            if other.id == event.id or not other.time or not event.time:
                continue
            delta = abs((datetime.combine(event.date, event.time) - datetime.combine(other.date, other.time)).total_seconds()) / 60
            if 0 < delta < 30:
                recommendations.append(L({
                    "uk": "‚è± –ü–æ–¥—ñ—ó –π–¥—É—Ç—å –º–∞–π–∂–µ –±–µ–∑ –ø–µ—Ä–µ—Ä–≤.",
                    "en": "‚è± Events are scheduled almost back-to-back."
                }))
                break

        if event.repeat != "none":
            existing = [e for e in same_day_events if e.time == event.time and e.repeat == event.repeat]
            if len(existing) > 1:
                recommendations.append(L({
                    "uk": "üîÅ –£–∂–µ —î —Ç–∞–∫–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∞ –ø–æ–¥—ñ—è.",
                    "en": "üîÅ There is already such a recurring event."
                }))

    await state.clear()
    await message.answer(L({
        "uk": "‚úÖ –ü–æ–¥—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ —É—Å—ñ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!",
        "en": "‚úÖ Event saved with all parameters!"
    }))

    if recommendations:
        await message.answer(L({
            "uk": "üìå <b>–ü–æ—Ä–∞–¥–∏:</b>\n" + "\n".join(recommendations),
            "en": "üìå <b>Recommendations:</b>\n" + "\n".join(recommendations)
        }))
