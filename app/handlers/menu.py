from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import select
from app.db import async_session
from app.handlers.event_add import cmd_add

from app.handlers.event_chart import chart_handler
from app.handlers.event_export import export_csv
from app.handlers.event_list import list_today, list_week
from app.handlers.event_stats import stats_handler
from app.integrations.google_calendar import import_events_from_google
from app.models.models import User
from app.repositories.user_repo import get_user_by_telegram_id
from app.utils.i18n import get_switch_lang, get_lang_button
from app.utils.i18n import L

router = Router()


def build_main_menu(lang: str = "uk") -> ReplyKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Args:
        lang (str): 'uk' –∞–±–æ 'en' ‚Äî –º–æ–≤–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫.

    Returns:
        ReplyKeyboardMarkup: —Ä–æ–∑–º—ñ—Ç–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏" if lang == "uk" else "‚ûï Add")],
            [
                KeyboardButton(text="üìÖ –°—å–æ–≥–æ–¥–Ω—ñ" if lang == "uk" else "üìÖ Today"),
                KeyboardButton(text="üóì –¢–∏–∂–¥–µ–Ω—å" if lang == "uk" else "üóì Week")
            ],
            [
                KeyboardButton(text="üì§ CSV" if lang == "uk" else "üì§ CSV"),
                KeyboardButton(text="üì• Google" if lang == "uk" else "üì• Google")
            ],
            [
                KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" if lang == "uk" else "üìà Stats"),
                KeyboardButton(text="üìä –ì—Ä–∞—Ñ—ñ–∫" if lang == "uk" else "üìä Chart")
            ],
            [KeyboardButton(text=get_lang_button(lang))]
        ],
        input_field_placeholder="–ú–µ–Ω—é ‚Üì" if lang == "uk" else "Menu ‚Üì"
    )


@router.message(F.text == "/menu")
async def send_menu(message: Message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /menu.

    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –π–æ–≥–æ –º–æ–≤–∏.
    """
    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        lang = user.language if user else "uk"
        await message.answer(
            "üìã –ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∏–∂—á–µ üëá" if lang == "uk" else "üìã Menu below üëá",
            reply_markup=build_main_menu(lang)
        )


@router.message(F.text.in_(["üá¨üáß English", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"]))
async def switch_language(message: Message):
    """
    –ó–º—ñ–Ω—é—î –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    –í–∏–∑–Ω–∞—á–∞—î –ø–æ—Ç–æ—á–Ω—É –º–æ–≤—É —ñ –ø–µ—Ä–µ–º–∏–∫–∞—î –Ω–∞ —ñ–Ω—à—É (uk <-> en).
    """
    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        new_lang = get_switch_lang(user.language)
        user.language = new_lang
        await session.commit()

        await message.answer(
            "‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ!" if new_lang == "uk" else "‚úÖ Language switched!",
            reply_markup=build_main_menu(new_lang)
        )


@router.message(F.text.in_(["‚ûï –î–æ–¥–∞—Ç–∏", "‚ûï Add"]))
async def menu_add_event(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é".

    –ó–∞–ø—É—Å–∫–∞—î FSM –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ–¥—ñ—ó.
    """
    await cmd_add(message, state)


@router.message(F.text.in_(["üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", "üìÖ Today"]))
async def menu_today(message: Message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É "–°—å–æ–≥–æ–¥–Ω—ñ".

    –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å.
    """
    await list_today(message)


@router.message(F.text.in_(["üóì –¢–∏–∂–¥–µ–Ω—å", "üóì Week"]))
async def menu_week(message: Message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É "–¢–∏–∂–¥–µ–Ω—å".

    –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å.
    """
    await list_week(message)


@router.message(F.text.in_(["üì§ CSV", "üì§ CSV"]))
async def menu_export_csv(message: Message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É "–ï–∫—Å–ø–æ—Ä—Ç CSV".

    –ù–∞–¥—Å–∏–ª–∞—î —Ñ–∞–π–ª –∑ –ø–æ–¥—ñ—è–º–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV.
    """
    await export_csv(message)


@router.message(F.text.in_(["üì• Google", "üì• Google"]))
async def menu_import_google(message: Message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É "–Ü–º–ø–æ—Ä—Ç Google".

    –Ü–º–ø–æ—Ä—Ç—É—î –ø–æ–¥—ñ—ó –∑ Google Calendar.
    """
    async with async_session() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)
        if not user:
            await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
            return

        try:
            count = await import_events_from_google(user)
            await message.answer(L({
                "uk": f"‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {count} –ø–æ–¥—ñ–π –∑ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è.",
                "en": f"‚úÖ Imported {count} events from Google Calendar."
            }, user.language))
        except Exception as e:
            print(f"[Import Error] {e}")
            await message.answer(L({
                "uk": "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –∑ Google.",
                "en": "‚ùå Failed to import from Google."
            }, user.language))


@router.message(F.text.in_(["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìà Stats"]))
async def menu_stats(message: Message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".

    –í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏–π –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await stats_handler(message)


@router.message(F.text.in_(["üìä –ì—Ä–∞—Ñ—ñ–∫", "üìä Chart"]))
async def menu_chart(message: Message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É "–ì—Ä–∞—Ñ—ñ–∫".

    –í–∏–≤–æ–¥–∏—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.
    """
    await chart_handler(message)
