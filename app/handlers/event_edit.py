from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.utils.i18n import L

from app.services.event_edit_service import (
    list_events_to_edit,
    send_edit_prompt,
    apply_edit
)

router = Router()


class EditEventState(StatesGroup):
    """
    –°—Ç–∞–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó:
    - –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–æ–ª—è
    - –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    """
    waiting_for_field = State()
    waiting_for_new_value = State()


@router.message(F.text == "/edit")
async def list_events_for_edit(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /edit.

    –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π, –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.
    """
    await list_events_to_edit(message, state)


@router.callback_query(F.data.startswith("edit_event:"))
async def choose_field(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø–æ–¥—ñ—ó –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.

    –ó–±–µ—Ä—ñ–≥–∞—î ID –ø–æ–¥—ñ—ó —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –≤–∏–±—ñ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.
    """
    event_id = int(callback.data.split(":")[1])
    await state.update_data(event_id=event_id)

    await callback.message.answer(
        L({
            "uk": "üîß –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?",
            "en": "üîß What would you like to change?"
        }),
        reply_markup=build_edit_keyboard()
    )
    await state.set_state(EditEventState.waiting_for_field)
    await callback.answer()


@router.callback_query(F.data.startswith("edit_field:"))
async def ask_for_new_value(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.

    –ó–∞–ø–∏—Ç—É—î –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.
    """
    await send_edit_prompt(callback, state)
    await state.set_state(EditEventState.waiting_for_new_value)


@router.message(EditEventState.waiting_for_new_value)
async def save_new_value(message: Message, state: FSMContext):
    """
    –û—Ç—Ä–∏–º—É—î –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î –∑–º—ñ–Ω–∏ –¥–æ –ø–æ–¥—ñ—ó.
    """
    await apply_edit(message, state)


def build_edit_keyboard():
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –ø–æ–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        InlineKeyboardMarkup: –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—ñ–≤ –ø–æ–¥—ñ—ó.
    """
    buttons = [
        [(L({"uk": "–ù–∞–∑–≤—É", "en": "Title"}), "title"), (L({"uk": "–î–∞—Ç—É", "en": "Date"}), "date")],
        [(L({"uk": "–ß–∞—Å", "en": "Time"}), "time"), (L({"uk": "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", "en": "Reminder"}), "remind")],
        [(L({"uk": "–ö–∞—Ç–µ–≥–æ—Ä—ñ—é", "en": "Category"}), "category"), (L({"uk": "–¢–µ–≥–∏", "en": "Tags"}), "tag")],
        [(L({"uk": "–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è", "en": "Repeat"}), "repeat")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=label, callback_data=f"edit_field:{code}") for label, code in row]
        for row in buttons
    ])
