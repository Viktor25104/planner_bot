from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.services.event_add_service import (
    validate_date, validate_time, finish_event_logic
)
from app.utils.i18n import L

router = Router()


class AddEventState(StatesGroup):
    """
    –ö–ª–∞—Å, —â–æ –æ–ø–∏—Å—É—î —Å—Ç–∞–Ω–∏ FSM –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó.
    """
    title = State()
    date = State()
    time = State()
    remind = State()
    category = State()
    tag = State()
    repeat = State()


@router.message(F.text == "/add")
async def cmd_add(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /add. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó –∑ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏.
    """
    await state.set_state(AddEventState.title)
    await message.answer(L({
        "uk": "üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:",
        "en": "üìù Enter event title:"
    }))


@router.message(AddEventState.title)
async def add_title(message: Message, state: FSMContext):
    """
    –û—Ç—Ä–∏–º—É—î –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏.
    """
    await state.update_data(title=message.text.strip())
    await state.set_state(AddEventState.date)
    await message.answer(L({
        "uk": "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –ø–æ–¥—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:",
        "en": "üìÖ Enter event date (DD.MM.YYYY):"
    }))


@router.message(AddEventState.date)
async def add_date(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—É –¥–∞—Ç—É –ø–æ–¥—ñ—ó. –£ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è.
    """
    if message.text in ["/cancel", "/today", "/start", "/help"]:
        await state.clear()
        return

    try:
        parsed_date = validate_date(message.text)
        await state.update_data(date=parsed_date)
        await state.set_state(AddEventState.time)
        await message.answer(L({
            "uk": "‚è∞ –í–≤–µ–¥–∏ —á–∞—Å –ø–æ–¥—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (24-–≥–æ–¥):",
            "en": "‚è∞ Enter event time (HH:MM, 24h):"
        }))
    except ValueError:
        await message.answer(L({
            "uk": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑: –î–î.–ú–ú.–†–†–†–†",
            "en": "‚ùå Invalid date format. Try again: DD.MM.YYYY"
        }))


@router.message(AddEventState.time)
async def add_time(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–∏–π —á–∞—Å –ø–æ–¥—ñ—ó. –£ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏.
    """
    if message.text == "/cancel":
        return

    try:
        parsed_time = validate_time(message.text)
        await state.update_data(time=parsed_time)
        await state.set_state(AddEventState.remind)
        await message.answer(L({
            "uk": "üîî –ó–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –¥–æ –ø–æ–¥—ñ—ó –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è?",
            "en": "üîî How many minutes before the event to send a reminder?"
        }))
    except ValueError:
        await message.answer(L({
            "uk": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑: –ì–ì:–•–•",
            "en": "‚ùå Invalid time format. Try again: HH:MM"
        }))


@router.message(AddEventState.remind)
async def add_category(message: Message, state: FSMContext):
    """
    –û—Ç—Ä–∏–º—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö) —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.
    """
    if message.text == "/cancel":
        return

    try:
        remind = int(message.text.strip())
        await state.update_data(remind_before=remind)
        await state.set_state(AddEventState.category)
        await message.answer(L({
            "uk": "üè∑ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è (–∞–±–æ `-`):",
            "en": "üè∑ Category (or `-`):"
        }))
    except ValueError:
        await message.answer(L({
            "uk": "‚ùå –í–≤–µ–¥–∏ –ª–∏—à–µ —á–∏—Å–ª–æ (—Ö–≤–∏–ª–∏–Ω–∏ –¥–æ –ø–æ–¥—ñ—ó)",
            "en": "‚ùå Please enter a number (minutes before event)"
        }))


@router.message(AddEventState.category)
async def add_tag(message: Message, state: FSMContext):
    """
    –û—Ç—Ä–∏–º—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–æ–¥—ñ—ó (–∞–±–æ `-` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É) —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ —Ç–µ–≥—ñ–≤.
    """
    if message.text == "/cancel":
        return

    category = message.text.strip()
    await state.update_data(category=None if category == "-" else category)
    await state.set_state(AddEventState.tag)
    await message.answer(L({
        "uk": "üîñ –¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É –∞–±–æ `-`):",
        "en": "üîñ Tags (comma separated or `-`):"
    }))


@router.message(AddEventState.tag)
async def ask_repeat(message: Message, state: FSMContext):
    """
    –û—Ç—Ä–∏–º—É—î —Ç–µ–≥–∏ –ø–æ–¥—ñ—ó (–∞–±–æ `-` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É) —ñ –∑–∞–ø–∏—Ç—É—î —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä—É.
    """
    if message.text == "/cancel":
        return

    tag = message.text.strip()
    await state.update_data(tag=None if tag == "-" else tag)
    await state.set_state(AddEventState.repeat)
    await message.answer(L({
        "uk": (
            "üîÅ –ü–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–Ω—è:\n"
            "`none`, `daily`, `weekly`, `monthly`, `yearly`\n"
            "–í–≤–µ–¥–∏ —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä—É:"
        ),
        "en": (
            "üîÅ Repeat:\n"
            "`none`, `daily`, `weekly`, `monthly`, `yearly`\n"
            "Enter repeat type:"
        )
    }))


@router.message(AddEventState.repeat)
async def finish_event(message: Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó, –ø–µ—Ä–µ–¥–∞—é—á–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ª–æ–≥—ñ–∫—É.
    """
    await finish_event_logic(message, state)
