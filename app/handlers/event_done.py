from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

from app.db import async_session
from app.models.models import Event
from app.repositories.user_repo import get_user_by_telegram_id
from app.repositories.event_repo import get_today_user_events, mark_event_as_done, get_event_by_id

router = Router()

def simple_format_event(event: Event) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –ø–æ–¥—ñ—é —É –≤–∏–≥–ª—è–¥—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram.

    Args:
        event (Event): –û–±'—î–∫—Ç –ø–æ–¥—ñ—ó.

    Returns:
        str: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
    """
    lines = [
        f"<b>{event.title}</b>",
        f"üóì {event.date.strftime('%d.%m.%Y')} –æ {event.time.strftime('%H:%M') if event.time else '–±–µ–∑ —á–∞—Å—É'}"
    ]
    if event.category:
        lines.append(f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {event.category}")
    if event.tag:
        lines.append(f"üîñ –¢–µ–≥–∏: {event.tag}")
    if event.is_done:
        lines.append("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ")
    return "\n".join(lines)


@router.message(F.text.startswith("/done"))
async def show_today_events_to_mark_done(message: Message):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /done. –í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ—Ö –ø–æ–¥—ñ–π, —è–∫—ñ –≤–∂–µ –≤—ñ–¥–±—É–ª–∏—Å—è,
    —ñ –¥–æ–∑–≤–æ–ª—è—î –ø–æ–∑–Ω–∞—á–∏—Ç–∏ —ó—Ö —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏.

    Args:
        message (Message): –û–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telegram.
    """
    today = datetime.now().date()

    async with async_session() as session:
        user = await get_user_by_telegram_id(session, message.from_user.id)
        if not user:
            await message.answer("‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å /start.")
            return

        events = await get_today_user_events(session, user.id, today)

        if not events:
            await message.answer("üì≠ –ù–µ–º–∞—î –ø–æ–¥—ñ–π –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ, —è–∫—ñ –º–æ–∂–Ω–∞ –≤—ñ–¥–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—ñ.")
            return

        for event in events:
            await message.answer(
                simple_format_event(event),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"done:{event.id}")
                ]])
            )


@router.callback_query(F.data.startswith("done:"))
async def mark_event_done_callback(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ". –ü–æ–∑–Ω–∞—á–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ø–æ–¥—ñ—é —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—É,
    —è–∫—â–æ –≤–æ–Ω–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram.
    """
    event_id = int(callback.data.split(":")[1])

    async with async_session() as session:
        user = await get_user_by_telegram_id(session, callback.from_user.id)
        if not user:
            await callback.answer("‚ö†Ô∏è –ü–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º.", show_alert=True)
            return

        success = await mark_event_as_done(session, event_id, user.id)

        if not success:
            await callback.answer("‚ö†Ô∏è –ü–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º.", show_alert=True)
            return

        event = await get_event_by_id(session, event_id)

        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ:</b>\n{simple_format_event(event)}",
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ.")
